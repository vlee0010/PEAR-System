<?php
namespace App\Controller;

use App\Model\Entity\Role;
use Cake\Mailer\Email;
use Cake\Mailer\TransportFactory;

class StaffController extends AppController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadModel('Units');
        $this->loadModel('peer_reviews');
        $this->loadModel('Users');
        $this->loadModel('units_tutors');
        $this->loadModel('units_classes');
        $this->loadModel('students_classes');
        $this->loadModel('units_users');
        $this->loadModel('teams_users');
        $this->loadModel('teams');
        $this->loadModel('Classes');
        $this->loadModel('peer_reviews_users');
        $this->loadModel('Responses');
        $this->loadModel('Questions');

    }

    public function isAuthorized($user)
    {
        // If you are a user, you can access this dashboard.
        return Role::isStaff($user['role']);
    }

    public function index()
    {
        $tutor_id=$this->Auth->user('id');
        $unit_id_list=$this->units_tutors->find('list',array('field',array('unit_id')))->where(['tutor_id'=>$tutor_id]);
        $unit_list=[];
        foreach($unit_id_list as $unit_id){
            array_push($unit_list,$this->Units->find()->where(['id'=>$unit_id])->first());
        }

        $this->set(compact('unit_list'));

    }
    public function displayclass($id=null){
        $unit_class_list=$this->units_classes->find()->where(['unit_id'=>$id]);
        $class_id_list=[];
        $peer_review=$this->peer_reviews->find()->where(['unit_id'=>$id,'status'=>0])->first();
        $peer_id=$peer_review->id;
        foreach ($unit_class_list as $unit_class) {
            array_push($class_id_list,$unit_class->class_id);
        }
        $class_list=[];
        foreach ($class_id_list as $class_id){
            array_push($class_list,$this->Classes->find()->where(['id'=>$class_id])->first());

        }
        $tutor_id=$this->Auth->user('id');

        $this->set(compact('class_list','peer_id'));
    }
    public function displaystudent($id=null,$peer_id=null){
        $student_id_list=$this->students_classes->find('list',array('field',array('student_id')))->where(['class_id'=>$id]);
        $student_list=[];
        $peer_review_user_list=[];
        foreach ($student_id_list as $student_id){
            array_push($student_list,$this->Users->find()->where(['id'=>$student_id])->first());
            array_push($peer_review_user_list,$this->peer_reviews_users->find()->where(['peer_review_id'=>$peer_id,'user_id'=>$student_id])->first());
        }
        $peer_review=$this->peer_reviews->find()->where(['id'=>$peer_id])->first();

        $peer_query = $this->peer_reviews->find()->where(['unit_id'=>$id]);
        $unit_activity = $peer_query->select([
            'unitname' => 'Units.title',
            'unitcode' => 'Units.code',
            'activity' => 'peer_reviews.title',
            'datestart' => 'peer_reviews.date_start',
            'dateend' => 'peer_reviews.date_end',
            'peer_id' => 'peer_reviews.id'
        ])
            ->innerJoinWith('Units');

        $this->set('unit_activity',$unit_activity);

        $this->set(compact('student_list','peer_review','peer_review_user_list',"peer_id"));

    }

    public function displayResults($student_id =null, $peer_review_id=null ){
//        $response_list = $this->Responses->find('all',array(
//            'field'=>array('Response.*'),
//            'join'=>array(
//                array(
//                    'table'=>'Questions',
//                    'alias'=>'Question',
//                    'type'=>'INNER',
//                    'conditions'=>array('Responses.question_id'=>'Question.id')
//                ),
//            )
//        ))->where(['Responses.user_id'=>$student_id,'Responses.peer_review_id'=>$peer_review_id]);
        $response_list = $this->Responses->find()->contain([
            'Questions',
            'Users'
        ])->where(['user_id'=>$student_id,'peer_review_id'=>$peer_review_id]);
//        foreach ($response_list as $response){
//            debug($response);
//        }
        $this->set(compact('response_list'));
    }
    public function export()
    {
        $this->response = $this->response->withDownload('class_results.csv');
        $ar =[];
        array_push($ar,'shit','shit','shit');
        $data = [
            ['a', 'b', 'c'],
            [1, 2, 3],
            ['you', 'and', 'me'],
        ];
        array_push($data,$ar);
        $_serialize = 'data';

        $this->viewBuilder()->setClassName('CsvView.Csv');
        $this->set(compact('data', '_serialize'));
    }

    public function viewAllResults($peer_id=null){
        $response_query = $this->Responses->find()->where(['peer_review_id' => $peer_id]);
        $questions_desc = $response_query->select([
            'question' => "Questions.description"
        ])  -> innerJoinWith('Questions')
            -> distinct();

        $this->set('questions_desc',$questions_desc);
    }

    public function sendReminderEmail($peer_id=null){

        $peer_review = $this->peer_reviews->find()->where(['peer_reviews.id'=>$peer_id]);
        $peer_review_title = $peer_review->select([
            'title' => 'peer_reviews.title'
        ]);

        $unit_query = $peer_review->select([
            'code' => 'Units.code',
            'year' => 'Units.year',
            'semester' => 'Units.semester'
        ])  ->innerJoinWith('Units');

        $peer_review_user_query = $this->peer_reviews_users->find()->where(['peer_reviews_users.peer_review_id' => $peer_id,'peer_reviews_users.status' => 0]);
        $student_list = $peer_review_user_query->select([
            'email' => 'us.email'
        ])  ->join([
                'us' => [
                    'table' => 'users',
                    'conditions' => [
                        'us.id = peer_reviews_users.user_id',
                    ]
                ]
        ]);

//        $subject = $unit_title. ' Role via PEAR Monash';
        foreach ($peer_review_title as $peer_review_title):
            $activity_title = $peer_review_title->title;
        endforeach;

        foreach ($unit_query as $unit):
            $unit_code = $unit->code;
            $unit_year = $unit->year;
            $unit_semester = $unit->semester;
            endforeach;
        $student_email_list = [];
        foreach ($student_list as $student):
                array_push($student_email_list,$student->email);
            endforeach;


        $my_list = [];
        $myEmail = 'levanhai010198@gmail.com';
        $my2Email   = 'rzan0002@student.monash.edu';
        array_push($my_list,$myEmail);
//        array_push($my_list,$my2Email);
        $from = $unit_code. " Role via Pear Monash";

        $subject = "PEAR Monash upcoming survey deadline";
        $header = "Activity will be closed soon";
        $message = "<h1>Activity will be closed soon</h1>";
        $message .= "The data for the following activity will be closed soon: <br><br>";
        $message .= "<i>Activity: " . $activity_title . " </i><br> ";
        $message .= "<i>Unit: " . $unit_code . " " . "$unit_year" . " S" . $unit_semester ."</i><br>";
        $message .= "<br>Please follow this link to complete: <a href='http://ie.infotech.monash.edu/team123/development/team123-app/PEAR'>PEAR Monash</a> ";
        if($this->request->is('post')){
//            $this->Flash->set('Email Sent.',['element'=>'success']);
            $this->Flash->success(__('Email Sent'));
            $email = new Email('default');
            $email
                ->transport('mailjet')
                ->from(['pearmonash@gmail.com'=> $from])
                ->subject($subject)
                ->setHeaders([$header])
                ->emailFormat('html')
                ->bcc($student_email_list)
                ->send($message);
//            return $this->redirect(['action' => 'displaystudent',1,2]);
        }
        else{
            $this->Flash->set('Error sending email',['element'=>'error']);
        }
        $this->set('title', $peer_review_title);
    }
}
