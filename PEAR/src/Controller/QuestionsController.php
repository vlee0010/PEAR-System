<?php

namespace App\Controller;

use App\Controller\AppController;
use Cake\ORM\TableRegistry;
use Cake\I18n\Time;

/**
 * Questions Controller
 *
 * @property \App\Model\Table\QuestionsTable $Questions
 *
 * @method \App\Model\Entity\Question[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class QuestionsController extends AppController
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadModel('PeerReviews');
        $this->loadModel('teams_users');
        $this->loadModel('Users');
        $this->loadModel('Questions');
        $this->loadModel('Responses');
        $this->loadModel('Answers');
    }

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function index($team_id = null,$peer_id = null)
    {
        $questions = $this->paginate($this->Questions);

        $peersUsersTable =  TableRegistry::getTableLocator()->get('peer_reviews_users');
        $questionsTable = TableRegistry::getTableLocator()->get('questions');
        $question_query = $questionsTable->find();
        $responsesTable = TableRegistry::getTableLocator()->get('responses');

        $userQuery = $this->Users->find()->where();
        $userList = $userQuery->select([
            'id' => 'Users.id',
            'firstname' => 'Users.firstname',
            'lastname' => 'Users.lastname'
        ])->innerJoinWith('Teams')
            ->where(['Teams.id_' => $team_id]);

        if ($this->request->is('post')) {
            foreach ($question_query as $question) {
                foreach ($userList as $user) {
                    $response = $responsesTable->newEntity();
                    $response->date_response = Time::now();
                    $response->user_id = $this->Auth->user('id');
                    $response->question_id = $question->id;
                    $response->ratee_id = $user->id;
                    $response->peer_review_id = $peer_id;
                    if ($question->id != 6) {
                        $response->is_text_number = 0;
                        $response->rate_number = $this->request->getData('sliderRating_' . $question->id . '_' . $user->id);
                        $responsesTable->save($response);
                    } else {
                        $response->is_text_number = 1;
                        $response->rate_text = $this->request->getData('textRating_' . $question->id . '_' . $user->id);
                        $responsesTable->save($response);
                    }
                }
            }
            $query = $peersUsersTable->query();
            $query->update()
                ->set(['status' => 1])
                ->where(['peer_review_id' => $peer_id, 'user_id' => $this->Auth->user('id')])
                ->execute();
            $this->redirect(['controller' => 'users', 'action' => 'studentdash']);
        }

        $this->set(compact('questions'));
        $this->set(compact('userList'));

    }

    /**
     * View method
     *
     * @param string|null $id Question id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $question = $this->Questions->get($id, [
            'contain' => []
        ]);

        $this->set('question', $question);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $question = $this->Questions->newEntity();
        if ($this->request->is('post')) {
            $question = $this->Questions->patchEntity($question, $this->request->getData());
            if ($this->Questions->save($question)) {
                $this->Flash->success(__('The question has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The question could not be saved. Please, try again.'));
        }
        $this->set(compact('question'));
    }

    /**
     * Edit method
     *
     * @param string|null $id Question id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $question = $this->Questions->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $question = $this->Questions->patchEntity($question, $this->request->getData());
            if ($this->Questions->save($question)) {
                $this->Flash->success(__('The question has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The question could not be saved. Please, try again.'));
        }
        $this->set(compact('question'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Question id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $question = $this->Questions->get($id);
        if ($this->Questions->delete($question)) {
            $this->Flash->success(__('The question has been deleted.'));
        } else {
            $this->Flash->error(__('The question could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }


}
