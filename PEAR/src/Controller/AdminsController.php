<?php
// src/Controller/ArticlesController.php

namespace App\Controller;

use Cake\ORM\TableRegistry;

class AdminsController extends AppController
{


    public function initialize()
    {
        $this->loadModel('Questions');
        $unitTable = TableRegistry::getTableLocator()->get('units');
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadModel('Units');
        $this->loadModel('peer_reviews_questions');
    }

    public function index()
    {

    }
    public function addQuestions(){
        $questionTable = TableRegistry::getTableLocator()->get('questions');
        if ($this->request->is('post')){
            $questionDescription = $this->request->getData('question');
//            debug($questionDescription);
            $newQuestion = $questionTable->newEntity();
            $newQuestion->description = $questionDescription;
            if ($this->Questions->save($newQuestion)){
                $this->Flash->success("New question " .$newQuestion->description." has been added into the Question Bank Successfully!");
            };
        }
    }
    public function checkUnitExists(){

        $unitTable = TableRegistry::getTableLocator()->get('units');

        if($this->request->is('post')) {
            $unitCode = $this->request->getData('unitCode');
            $title = $this->request->getData('title');
            $semester = $this->request->getData('semester');
            $year = $this->request->getData('year');
            $unitMatches = $unitTable->find()->where(['code' => $unitCode, 'semester' => $semester, 'year' => $year]);
            $matches = [];
//            debug($matches);
            foreach ($unitMatches as $unitMatch) {
//                debug($matches);
                array_push($matches, $unitMatch->id);
            }
//            debug($matches);
            if (count($matches)){
                return [(count($matches)),$matches[0]];
            }else{
                return false;
            }

        }
    }


    public function createPeerReview()
    {
        $peerReviewQuestionTable=TableRegistry::getTableLocator()->get('peer_reviews_questions');

        $questions = $this->paginate($this->Questions);

        $this->set(compact('questions'));

//        get request information from form!;


        if ($this->request->is('post')) {
//            debug($this->request->getData('question'));
            if ($this->checkUnitExists()[0]) {

//                fetching data from the form

                $unitCode = $this->request->getData('unitCode');
                $title = $this->request->getData('title');
                $semester = $this->request->getData('semester');
                $year = $this->request->getData('year');
                $start_date = $this->request->getData('start-date');
                $end_date= $this->request->getData('end-date');
                $reminder_date= $this->request->getData('reminder-date');

//            Unit Exists, Proceed;
//            FInd correspond unit row..
            $unitRecord = $this->Units->find()->where(["code"=>$unitCode,"semester"=>$semester,"year"=>$year])->firstOrFail();
//
                $unitId = $unitRecord->id;

//            Create a new peer review

                $peerReviewTable = TableRegistry::getTableLocator()->get('peer_reviews');
                $newPeerReview = $peerReviewTable->newEntity();
//            fill the the data from the request like
//            date_start; date_end; date_reminder;title;unit_id;
                $newPeerReview->date_start =$start_date;
                $newPeerReview->date_end= $end_date;
                $newPeerReview->date_reminder = $reminder_date;
                $newPeerReview->title= $title;
                $newPeerReview->unit_id = $unitId;
           if($peerReviewTable->save($newPeerReview)){
//               get the newly created peerReview Id;

                $peer_reviews_id = $newPeerReview->id;
               $questions = ($this->request->getData('question'));
//               debug($questions);
               $good=0;
               foreach($questions as $question) {
//                   debug(question);
                   $newPeerReviewQuestion = $peerReviewQuestionTable->newEntity();
                   $newPeerReviewQuestion->peer_reviews_id = $peer_reviews_id;
                   $newPeerReviewQuestion->question_id = $question;
                   $peerReviewQuestionTable->save($newPeerReviewQuestion);
                   $good=1;
                }
               if($good==1){
               $this->Flash->success('This peer review has been successfully added!');}

           }else{
               $this->Flash->error("Sorry, Unable to save this Peer Review - " . $newPeerReview->title);
           }
            } else {
//            Unit does not exist, Ask User to create the unit first;
                $this->Flash->error('This unit does not exist in the database; Please create this unit first');
            };
        }


    }





    public function  create(){
        $unitTable = TableRegistry::getTableLocator()->get('units');

        if($this->request->is('post')) {
            $unitCode = $this->request->getData('unitCode');
            $title = $this->request->getData('title');
            $semester = $this->request->getData('semester');
            $year = $this->request->getData('year');
            $unitMatches = $unitTable->find()->where(['code'=>$unitCode, 'semester'=>$semester,'year'=>$year]);
            $matches = [];
            foreach($unitMatches as $unitMatch){
                array_push($matches,$unitMatch);
            }
            if (count($matches) === 1){
                $this->Flash->error('Unit Already Existed');
            }else{
                $newUnit = $unitTable->newEntity();
                $newUnit->title = $title;
                $newUnit->code = $unitCode;
                $newUnit->semester = $semester;
                $newUnit->year = $year;

                if ($this->Units->save($newUnit)) {
                    $this->Flash->success(__('The new unit'.$newUnit->code.' has been saved.'));

                    return $this->redirect(['controller'=>'admins','action' => 'index']);
                }else{
                    $this->Flash->error(__('The new unit' .$newUnit->code.'could not be saved. Please, try again.'));
                }

            }
//            debug($matches);
//            echo $unitCode . $semester . $year;
//            debug(count($this->request->getData()));
        }

    }

    public function submit(){
        if($this->request->is('post')){
            var_dump($this->request->getData());
        }
    }

    public function beforeFilter($event)
    {
        parent::beforeFilter($event);
        $user = $this->Auth->user();

        //If user's role is 1(students), redirect to students page;
        if ( $user['role'] == 1 ) {

            $this->redirect(['controller'=>'users','action'=>'studentdash']);
        }

//If user's role is 2(staff), redirect to staff page;
        if (isset($user['role']) && $user['role'] == 2 ) {

            $this->redirect(['controller'=>'staff','action'=>'index']);
        }






//        if (isset($user['role']) && $user['role'] === 'PARTNER') {
//            $this->Auth->allow(['index']);
//        }
//        if (!isset($user['role'])) {
//            $this->Auth->allow(['register','index']);
//        }
    }
}
